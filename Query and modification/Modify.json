
//1.Sell a book to a customer

// need work
match(b:Book{ISBN:'a20'})
CREATE (o:Order{date:date(), orderNo: apoc.create.uuid()})
CREATE (c)-[pu:PURCHASED{price:b.price, qty:20, ISBN: b.ISBN}]->(o)
FOREACH (x in CASE WHEN b.copies > pu.qty THEN [1] ELSE [] END | 
SET b.copies = b.copies - pu.qty
CREATE (o)-[co:CONTAINED]->(b) )


//2.Change the address of a customer

MERGE (newAddress:Address{town:'new town',zip:8000,street:'new street'})
WITH newAddress
MATCH (c:Customer{name:"Peter"})-[l:Lives_In]->(oldAddress:Address)
CREATE (c)-[:Lives_In]->(newAddress)
DELETE l




//3.Add an existing author to a book

MATCH (b:Book{ISBN:'a1'}),(a:Author{name:'Poul'})
CREATE (a)-[w:WORTE]->(b)
RETURN *



//4.Retire the "Space Opera" category and assign all books from that category to the parent category.
//Don't assume you know the id of the parent category

MATCH  (b:Book)-[i:IS_a]->(c:Category{name:'Space Opera'})
MATCH(c)-[p:PARENT]->(parent:Category)
WITH COLLECT(b.ISBN) AS nodesList, c,i, parent,b,p
FOREACH (n in nodesList | 
CREATE (b)-[:IS_a]->(parent)
DELETE i,p,c
)

//5.Change a book from Non-fiction to fiction, or vice versa
//Fiction to Non-Fiction

MATCH  (b:Book{ISBN:'a2'})-[i:IS_a]->(c:Category{name:'Dystopian'})
MATCH (target:Category{name:'Non-Fiction'})
CREATE (b)-[:IS_a]->(target)
DELETE i
RETURN b


//6.Retire the "Fantasy and Science Fiction" category and just use either "Fantasy" or "Science Fiction"

MATCH (sf:Category{name:'Fantasy and Science Fiction' })-[parent1:PARENT]->(sfp:Category)
MATCH (sifi:Category{name:'Science Fiction'})
MATCH (fa:Category{name:'Fantasy'})
WITH sf,sfp,sifi,fa
CREATE (sifi)-[parent2:PARENT]->(sfp)
CREATE (fa)-[parent3:PARENT]->(sifi)
WITH sf
MATCH (sf) DETACH DELETE sf


//7.Sell 3 copies of one book and 2 of another in a single order

MATCH(b1:Book{ISBN:'a1'})
MATCH(b2:Book{ISBN:'a2'})
MATCH (c:Customer{name:'Fadi'})
CREATE (o:Order{date:date(), orderNo: apoc.create.uuid()})
CREATE (c)-[pu1:PURCHASED{price:b1.price, qty:3, ISBN: b1.ISBN}]->(o)
CREATE (c)-[pu2:PURCHASED{price:b2.price, qty:2, ISBN: b2.ISBN}]->(o)
FOREACH (x in CASE WHEN b1.copies > pu1.qty THEN [1] ELSE [] END | 
SET b1.copies = b1.copies - pu1.qty
CREATE (o)-[:CONTAINED]->(b1) )
FOREACH (x in CASE WHEN b2.copies > pu2.qty THEN [1] ELSE [] END | 
SET b2.copies = b2.copies - pu2.qty
CREATE (o)-[:CONTAINED]->(b2) )
RETURN o



____________________



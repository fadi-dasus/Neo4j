CALL apoc.load.json("file:///category.json")
YIELD value
MERGE (c:Category { name: value.name })
   ON MATCH SET c.name = value.name
   ON CREATE SET c.name = value.name
MERGE (parent:Category { name: value.parent })
MERGE (c)-[:PARENT]->(parent)



CALL apoc.load.json("file:///bookStore.json")
	YIELD value
	MERGE (customer:Customer{name: value.name})
	ON CREATE SET
	customer.email = value.email,customer.password=value.password,customer.customerNo = apoc.create.uuid()
	MERGE (address:Address{street:value.address.street,zip:value.address.zip,town:value.address.town})
	MERGE((customer) -[:Lives_In]-> (address))
    	MERGE (book:Book{title:value.book.title,currency:'ØRE',ISBN: value.book.ISBN,price:value.book.price,pages:value.book.pages,copies:value.book.copies,language:value.book.language})
   	MERGE(author:Author{name:value.author.name,email:value.author.email})
   	MERGE(character:Character{type:value.book.cahracter.type})
  	MERGE(order:Order{id:value.order._id,date:value.order.date})
	ON CREATE SET 
	order.orderNo = apoc.create.uuid()
	REMOVE order.id
	MERGE ((category:Category{name:value.book.category}))
	MERGE((order)-[:CONTAINED]->(book))
	MERGE((customer)-[:PURCHASED{price:value.order.book.price,qty:value.order.book.qty,ISBN:value.order.book.ISBN}]->(order))
	MERGE((author)-[:WROTE]->(book))
	MERGE ((character)-[:PRESENTED_IN]->(book))
	MERGE ((book)-[:IS_a]->(category))
	MERGE (b:Book{title:'No one will buy me',ISBN:'unknown',pages:300,price:20,currency:'ØRE'})
 	MERGE (c:Category{name:'Fiction'})
	MERGE (a:Author{name:'bad author'})
	MERGE (c)<-[:IS_a]-(b)<-[w:WROTE]-(a)


CREATE CONSTRAINT ON (order:Order)
ASSERT order.uuid IS UNIQUE

CREATE CONSTRAINT ON (book:Book)
ASSERT book.ISBN IS UNIQUE


//add new book (which has not been ordered)
MATCH (book:Book{title:'new title',ISBN:'b2',price:15,pages:233,copies:5,language:'en'})
MATCH(c:Character{type:'Count Almaviva'}) 
MATCH (ca:Category{name:'Non-Fiction'}) 
WITH ca,c,book
MERGE (book)-[:IS_a]->(ca)
WITH ca,c,book
MERGE (c)-[:PRESENTED_IN]->(book)
	

	
